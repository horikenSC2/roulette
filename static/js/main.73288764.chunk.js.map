{"version":3,"sources":["App.jsx","index.js"],"names":["InputBox","props","id","className","onChange","event","items","text","split","filter","item","match","parseInput","target","value","Control","onClick","onStart","onStop","RouletteItems","selectClass","index","selected","finished","itemList","map","itemLabel","key","select","Item","Display","AppF","useState","setItems","setSelected","intervalId","setIntervalId","countdown","setCountdown","rolling","setRolling","length","setInterval","x","next","console","log","startCount","Math","floor","random","clearInterval","cnt","ReactDOM","render","App","document","getElementById"],"mappings":"8JAEMA,EAAW,SAAAC,GAWb,OACI,yBAAKC,GAAG,WAAWC,UAAU,aACzB,wDACA,8BAAUD,GAAG,YAAYE,SARhB,SAAAC,GACb,IACMC,EAPS,SAAAC,GACf,OAAOA,EACFC,MAAM,cACNC,QAAO,SAAAC,GAAI,OAAKA,EAAKC,MAAM,YAIlBC,CADDP,EAAMQ,OAAOC,OAE1Bb,EAAMG,SAASE,QASjBS,EAAU,SAAAd,GACZ,OACI,yBAAKC,GAAG,UAAUC,UAAU,aACxB,4BAAQa,QAASf,EAAMgB,SAAvB,SACA,4BAAQD,QAASf,EAAMiB,QAAvB,UAKNC,EAAgB,SAAAlB,GAClB,IAAMmB,EAAc,SAAAC,GAChB,OAAIA,IAAUpB,EAAMqB,SACT,eACArB,EAAMsB,SACN,cAEA,iBAMf,OAHctB,EAAMuB,SAASC,KAAI,SAACC,EAAWL,GACzC,OAAO,kBAAC,EAAD,CAAMM,IAAKN,EAAQ,IAAMK,EAAWA,UAAWA,EAAWE,OAAQR,EAAYC,SAKvFQ,EAAO,SAAA5B,GACT,OAAO,yBAAKE,UAAS,eAAUF,EAAM2B,SAAW3B,EAAMyB,YAGpDI,EAAU,SAAA7B,GACZ,IAAMuB,EAAWvB,EAAMuB,UAAY,GACnC,OACI,yBAAKrB,UAAU,uBACX,kBAAC,EAAD,CAAeqB,SAAUA,EAAUF,SAAUrB,EAAMqB,SAAUC,SAAUtB,EAAMsB,aAyE1EQ,EApEF,WAAO,IAAD,EACWC,mBAAS,IADpB,mBACR1B,EADQ,KACD2B,EADC,OAEiBD,oBAAU,GAF3B,mBAERV,EAFQ,KAEEY,EAFF,OAGqBF,mBAAS,MAH9B,mBAGRG,EAHQ,KAGIC,EAHJ,OAImBJ,oBAAU,GAJ7B,mBAIRK,EAJQ,KAIGC,EAJH,OAKeN,oBAAS,GALxB,mBAKRO,EALQ,KAKCC,EALD,KA4Df,OACI,6BACI,kBAAC,EAAD,CAAUpC,SAvDW,SAAAE,GACzB2B,EAAS3B,GACT4B,GAAa,GACbI,GAAc,MAqDV,kBAAC,EAAD,CAASrB,QAnDD,WACO,OAAfkB,EAIiB,IAAjB7B,EAAMmC,QAIVD,GAAW,GACXJ,EAAcM,aAAY,WACtBR,GAAY,SAAAS,GACR,IAAMC,GAAQD,EAAI,GAAKrC,EAAMmC,OAE7B,OADAI,QAAQC,IAAR,0BAA+BF,EAA/B,aAAwCtC,EAAMsC,GAA9C,MACOA,OAEZ,OAVCC,QAAQC,IAAR,mBAJAD,QAAQC,IAAR,kCAAuCX,KAiDZjB,OAjCpB,WAEX,GADA2B,QAAQC,IAAI,mBACPP,EAAL,CAIA,IAAMQ,EAAaC,KAAKC,MAAMD,KAAKE,SAAW5C,EAAMmC,QAAUnC,EAAMmC,OACpEH,EAAaS,EAAa,EAAIA,EAAa,GAC3CX,GAAc,SAAAD,GAEV,OADAgB,cAAchB,GACPO,aAAY,WACfJ,GAAa,SAAAc,GAcT,OAbAlB,GAAY,SAAAS,GACR,IAAMC,GAAQD,EAAI,GAAKrC,EAAMmC,OAE7B,OADAI,QAAQC,IAAR,0BAA+BF,EAA/B,aAAwCtC,EAAMsC,GAA9C,MACOA,KAEPQ,EAAM,IAAM,GACZhB,GAAc,SAAAlC,GAEV,OADAiD,cAAcjD,GACP,QAGf2C,QAAQC,IAAR,kBAAuBM,EAAM,IAC7BZ,GAAW,GACJY,EAAM,OAElB,aAxBHP,QAAQC,IAAR,+BA+BA,kBAAC,EAAD,CAAStB,SAAUlB,EAAOgB,SAAUA,EAAUC,SA1Df,IAAdc,IAAoBE,MC3DjDc,IAASC,OACP,kBAACC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.73288764.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst InputBox = props => {\n    const parseInput = text => {\n        return text\n            .split(/\\r\\n|\\r|\\n/) //改行コードで分割\n            .filter(item => !item.match(/^\\s*$/)); //空行削除\n    }\n    const onChange = event => {\n        const text = event.target.value;\n        const items = parseInput(text)\n        props.onChange(items);\n    }\n    return (\n        <div id=\"inputbox\" className=\"component\">\n            <h2>List of candidate items:</h2>\n            <textarea id=\"inputarea\" onChange={onChange}></textarea>\n        </div>\n    )\n}\nconst Control = props => {\n    return (\n        <div id=\"control\" className=\"component\">\n            <button onClick={props.onStart}>Start</button>\n            <button onClick={props.onStop}>Stop</button>\n        </div>\n    )\n}\n\nconst RouletteItems = props => {\n    const selectClass = index => {\n        if (index !== props.selected) {\n            return \"item-default\";\n        } else if (props.finished) {\n            return \"item-winner\";\n        } else {\n            return \"item-selected\";\n        }\n    }\n    const items = props.itemList.map((itemLabel, index) => {\n        return <Item key={index + \"-\" + itemLabel} itemLabel={itemLabel} select={selectClass(index)} />\n    });\n    return items;\n}\n\nconst Item = props => {\n    return <div className={`item ${props.select}`}>{props.itemLabel}</div>\n}\n\nconst Display = props => {\n    const itemList = props.itemList || [];\n    return (\n        <div className=\"container component\">\n            <RouletteItems itemList={itemList} selected={props.selected} finished={props.finished} />\n        </div>\n    )\n}\n\nconst AppF = () => {\n    const [items, setItems] = useState([]);\n    const [selected, setSelected] = useState(-1);\n    const [intervalId, setIntervalId] = useState(null);\n    const [countdown, setCountdown] = useState(-1);\n    const [rolling, setRolling] = useState(false);\n    const isFinished = () => countdown === 0 && !rolling;\n    const handleTextareaChange = items => {\n        setItems(items);\n        setSelected(-1);\n        setCountdown(-1);\n    };\n    const onStart = () => {\n        if (intervalId !== null) {\n            console.log(`intervalId is not null: ${intervalId}`);\n            return;\n        }\n        if (items.length === 0) {\n            console.log(`items are empty`);\n            return;\n        }\n        setRolling(true);\n        setIntervalId(setInterval(() => {\n            setSelected(x => {\n                const next = (x + 1) % items.length\n                console.log(`Selected item: (${next}, ${items[next]})`);\n                return next\n            });\n        }, 100));\n    };\n    const onStop = () => {\n        console.log(\"onStop() called\");\n        if (!rolling) {\n            console.log(`Roulette is not rolling.`);\n            return;\n        }\n        const startCount = Math.floor(Math.random() * items.length) + items.length;\n        setCountdown(startCount > 0 ? startCount : 1);\n        setIntervalId(intervalId => {\n            clearInterval(intervalId);\n            return setInterval(() => {\n                setCountdown(cnt => {\n                    setSelected(x => {\n                        const next = (x + 1) % items.length\n                        console.log(`Selected item: (${next}, ${items[next]})`);\n                        return next\n                    });\n                    if (cnt - 1 === 0) {\n                        setIntervalId(id => {\n                            clearInterval(id);\n                            return null;\n                        });\n                    }\n                    console.log(`count = ${cnt - 1}`);\n                    setRolling(false);\n                    return cnt - 1;\n                });\n            }, 500);\n        });\n    };\n    return (\n        <div>\n            <InputBox onChange={handleTextareaChange} />\n            <Control onStart={onStart} onStop={onStop} />\n            <Display itemList={items} selected={selected} finished={isFinished()} />\n        </div>\n    );\n}\nexport default AppF;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}