{"version":3,"sources":["App.jsx","index.js"],"names":["InputBox","props","id","className","onChange","event","items","text","replace","split","filter","item","parseInput","target","value","console","log","Control","onClick","onStart","onStop","RouletteItems","selectClass","index","selected","finished","itemList","map","itemLabel","key","select","Item","Display","App","state","handleTextareaChange","bind","this","setState","interval","setInterval","length","max","itemNum","randCnt","Math","floor","random","clearInterval","countdown","intervalMillsec","React","Component","ReactDOM","render","document","getElementById"],"mappings":"gNAEMA,EAAW,SAAAC,GAcb,OACI,yBAAKC,GAAG,WAAWC,UAAU,aACzB,wDACA,8BAAUD,GAAG,YAAYE,SAThB,SAAAC,GACb,IACMC,EATS,SAAAC,GACf,OAAOA,EACFC,QAAQ,YAAa,KAAM,IAAK,KAChCA,QAAQ,WAAY,GAAI,IAAK,KAC7BC,MAAM,cACNC,QAAO,SAAAC,GAAI,MAAa,KAATA,KAINC,CADDP,EAAMQ,OAAOC,OAE1BC,QAAQC,IAAIV,GACZL,EAAMG,SAASE,QASjBW,EAAU,SAAAhB,GACZ,OACI,yBAAKC,GAAG,UAAUC,UAAU,aACxB,4BAAQe,QAASjB,EAAMkB,SAAvB,SACA,4BAAQD,QAASjB,EAAMmB,QAAvB,UAKNC,EAAgB,SAAApB,GAClB,IAAMqB,EAAc,SAAAC,GAChB,OAAIA,IAAUtB,EAAMuB,SACT,eACAvB,EAAMwB,SACN,cAEA,iBAMf,OAHcxB,EAAMyB,SAASC,KAAI,SAACC,EAAWL,GACzC,OAAO,kBAAC,EAAD,CAAMM,IAAKN,EAAQ,IAAMK,EAAWA,UAAWA,EAAWE,OAAQR,EAAYC,SAKvFQ,EAAO,SAAA9B,GACT,OAAO,yBAAKE,UAAS,eAAUF,EAAM6B,SAAW7B,EAAM2B,YAGpDI,EAAU,SAAA/B,GACZ,IAAMyB,EAAWzB,EAAMyB,UAAY,GACnC,OACI,yBAAKvB,UAAU,uBACX,kBAAC,EAAD,CAAeuB,SAAUA,EAAUF,SAAUvB,EAAMuB,SAAUC,SAAUxB,EAAMwB,aA+E1EQ,E,kDAzEX,WAAYhC,GAAQ,IAAD,8BACf,cAAMA,IACDiC,MAAQ,CACTV,UAAW,EACXlB,MAAO,GACPmB,UAAU,GAEd,EAAKU,qBAAuB,EAAKA,qBAAqBC,KAA1B,gBAC5B,EAAKjB,QAAU,EAAKA,QAAQiB,KAAb,gBACf,EAAKhB,OAAS,EAAKA,OAAOgB,KAAZ,gBATC,E,iEAWE9B,GACjB+B,KAAKC,SAAS,CACVd,UAAW,EACXlB,MAAOA,EACPmB,UAAU,M,gCAGP,IAAD,OAEAc,EAAWC,aAAY,WACzB,EAAKF,UAAS,SAAAJ,GACV,MAAO,CACHV,UAAWU,EAAMV,SAAW,GAAKU,EAAM5B,MAAMmC,aAGtD,KACHJ,KAAKC,SAAS,CACVb,UAAU,EACVc,SAAUA,M,+BAGR,IACeG,EADhB,OAECC,EAAUN,KAAKH,MAAM5B,MAAMmC,OAC3BG,EAAUD,GAFKD,EAEkBC,EAFXE,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMJ,KAGlEL,KAAKC,UAAS,SAAAJ,GACV,IAAI,EAAKA,MAAMT,SAAf,CACAuB,cAAcd,EAAMK,UACpB,IAAMA,EAAWC,aAAY,WACzB,EAAKF,UAAS,SAAAJ,GAEV,OADAnB,QAAQC,IAAR,qBAA0BkB,EAAMe,YAC5Bf,EAAMe,UAAY,EACZ,CACFA,UAAWf,EAAMe,UAAY,EAC7BzB,UAAWU,EAAMV,SAAW,GAAKU,EAAM5B,MAAMmC,SAGjDO,cAAcd,EAAMK,UACb,CACHA,SAAU,KACVd,UAAU,SAKvB,KACH,MAAO,CACHwB,UAAWL,EACXL,SAAUA,S,+BAKlB,OACI,6BACI,kBAAC,EAAD,CAAUnC,SAAUiC,KAAKF,uBACzB,kBAAC,EAAD,CAAShB,QAASkB,KAAKlB,QAASC,OAAQiB,KAAKjB,OAAQ8B,gBAAiB,MACtE,kBAAC,EAAD,CAASxB,SAAUW,KAAKH,MAAM5B,MAAOkB,SAAUa,KAAKH,MAAMV,SAAUC,SAAUY,KAAKH,MAAMT,gB,GArEvF0B,IAAMC,WCxDxBC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.fa9c4ab6.chunk.js","sourcesContent":["import React from 'react';\n\nconst InputBox = props => {\n    const parseInput = text => {\n        return text\n            .replace(/\\n(\\s)+\\n/, \"\\n\", 'g', 'm') //0個以上のスペースのみからなる行を削除\n            .replace(/\\n(\\s)+$/, \"\", 'g', 'm')\n            .split(/\\r\\n|\\r|\\n/) //改行コードで分割\n            .filter(item => item !== \"\"); //空行削除\n    }\n    const onChange = event => {\n        const text = event.target.value;\n        const items = parseInput(text)\n        console.log(items);\n        props.onChange(items);\n    }\n    return (\n        <div id=\"inputbox\" className=\"component\">\n            <h2>List of candidate items:</h2>\n            <textarea id=\"inputarea\" onChange={onChange}></textarea>\n        </div>\n    )\n}\nconst Control = props => {\n    return (\n        <div id=\"control\" className=\"component\">\n            <button onClick={props.onStart}>Start</button>\n            <button onClick={props.onStop}>Stop</button>\n        </div>\n    )\n}\n\nconst RouletteItems = props => {\n    const selectClass = index => {\n        if (index !== props.selected) {\n            return \"item-default\";\n        } else if (props.finished) {\n            return \"item-winner\";\n        } else {\n            return \"item-selected\";\n        }\n    }\n    const items = props.itemList.map((itemLabel, index) => {\n        return <Item key={index + \"-\" + itemLabel} itemLabel={itemLabel} select={selectClass(index)} />\n    });\n    return items;\n}\n\nconst Item = props => {\n    return <div className={`item ${props.select}`}>{props.itemLabel}</div>\n}\n\nconst Display = props => {\n    const itemList = props.itemList || [];\n    return (\n        <div className=\"container component\">\n            <RouletteItems itemList={itemList} selected={props.selected} finished={props.finished} />\n        </div>\n    )\n}\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selected: -1,\n            items: [],\n            finished: false,\n        };\n        this.handleTextareaChange = this.handleTextareaChange.bind(this);\n        this.onStart = this.onStart.bind(this);\n        this.onStop = this.onStop.bind(this);\n    }\n    handleTextareaChange(items) {\n        this.setState({\n            selected: -1,\n            items: items,\n            finished: false,\n        });\n    }\n    onStart() {\n        // intervalMillsec = intervalMillsec || 1000;\n        const interval = setInterval(() => {\n            this.setState(state => {\n                return {\n                    selected: (state.selected + 1) % state.items.length,\n                }\n            });\n        }, 200);\n        this.setState({\n            finished: false,\n            interval: interval,\n        });\n    }\n    onStop() {\n        const getRandomInt = max => Math.floor(Math.random() * Math.floor(max));\n        const itemNum = this.state.items.length\n        const randCnt = itemNum + getRandomInt(itemNum);\n        this.setState(state => {\n            if (this.state.finished) return;\n            clearInterval(state.interval);\n            const interval = setInterval(() => {\n                this.setState(state => {\n                    console.log(`Remaining: ${state.countdown}`)\n                    if (state.countdown > 0) {\n                        return{\n                            countdown: state.countdown - 1,\n                            selected: (state.selected + 1) % state.items.length,\n                        };\n                    } else {\n                        clearInterval(state.interval)\n                        return {\n                            interval: null,\n                            finished: true,\n                        };\n                    }\n                });\n\n            }, 500);\n            return {\n                countdown: randCnt,\n                interval: interval,\n            }\n        });\n    }\n    render() {\n        return (\n            <div>\n                <InputBox onChange={this.handleTextareaChange} />\n                <Control onStart={this.onStart} onStop={this.onStop} intervalMillsec={1000} />\n                <Display itemList={this.state.items} selected={this.state.selected} finished={this.state.finished} />\n            </div>\n        )\n    }\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}